From: David Henningsson <david.henningsson@canonical.com>
Date: Wed, 22 Jul 2015 16:37:19 +0200
Subject: [PATCH 4/5] Expose peer credentials on pa_client

Signed-off-by: David Henningsson <david.henningsson@canonical.com>
---
 src/pulsecore/client.h          |  4 ++++
 src/pulsecore/creds.h           |  1 +
 src/pulsecore/iochannel.c       |  2 ++
 src/pulsecore/protocol-native.c | 13 +++++++++++++
 4 files changed, 20 insertions(+)

diff --git a/src/pulsecore/client.h b/src/pulsecore/client.h
index eb8173d..a038a0c 100644
--- a/src/pulsecore/client.h
+++ b/src/pulsecore/client.h
@@ -26,6 +26,7 @@
 #include <pulse/proplist.h>
 #include <pulsecore/core.h>
 #include <pulsecore/module.h>
+#include <pulsecore/creds.h>
 
 /* Every connection to the server should have a pa_client
  * attached. That way the user may generate a listing of all connected
@@ -35,6 +36,9 @@ struct pa_client {
     uint32_t index;
     pa_core *core;
 
+    pa_creds creds;
+    bool creds_valid;
+
     pa_proplist *proplist;
     pa_module *module;
     char *driver;
diff --git a/src/pulsecore/creds.h b/src/pulsecore/creds.h
index 9fdbb4f..8bcf636 100644
--- a/src/pulsecore/creds.h
+++ b/src/pulsecore/creds.h
@@ -41,6 +41,7 @@ typedef struct pa_cmsg_ancil_data pa_cmsg_ancil_data;
 struct pa_creds {
     gid_t gid;
     uid_t uid;
+    pid_t pid;
 };
 
 /* Struct for handling ancillary data, i e, extra data that can be sent together with a message
diff --git a/src/pulsecore/iochannel.c b/src/pulsecore/iochannel.c
index e25824b..3c83092 100644
--- a/src/pulsecore/iochannel.c
+++ b/src/pulsecore/iochannel.c
@@ -323,6 +323,7 @@ ssize_t pa_iochannel_write_with_creds(pa_iochannel*io, const void*data, size_t l
 
     u = (struct ucred*) CMSG_DATA(&cmsg.hdr);
 
+    /* FIXME: Check whether ucred->pid should be used */
     u->pid = getpid();
     if (ucred) {
         u->uid = ucred->uid;
@@ -445,6 +446,7 @@ ssize_t pa_iochannel_read_with_ancil_data(pa_iochannel*io, void*data, size_t l,
 
                 ancil_data->creds.gid = u.gid;
                 ancil_data->creds.uid = u.uid;
+                ancil_data->creds.pid = u.pid;
                 ancil_data->creds_valid = true;
             }
             else if (cmh->cmsg_type == SCM_RIGHTS) {
diff --git a/src/pulsecore/protocol-native.c b/src/pulsecore/protocol-native.c
index f7dc338..baaa952 100644
--- a/src/pulsecore/protocol-native.c
+++ b/src/pulsecore/protocol-native.c
@@ -2668,6 +2668,13 @@ static void command_auth(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_ta
             do_shm = false;
 
 #ifdef HAVE_CREDS
+    {
+        const pa_creds *creds;
+        if ((creds = pa_pdispatch_creds(pd))) {
+            c->client->creds = *creds;
+            c->client->creds_valid = true;
+        }
+    }
     if (do_shm) {
         /* Only enable SHM if both sides are owned by the same
          * user. This is a security measure because otherwise data
@@ -5631,6 +5638,7 @@ typedef struct pa_protocol_native_access_data {
 } pa_protocol_native_access_data;
 
 static void check_access_finish_cb(pa_access_data *data, bool res) {
+    uint32_t command, tag;
     pa_protocol_native_access_data *d = (pa_protocol_native_access_data *) data;
     pa_native_connection *c = PA_NATIVE_CONNECTION(d->userdata);
 
@@ -5639,6 +5647,11 @@ static void check_access_finish_cb(pa_access_data *data, bool res) {
         goto finish;
     }
 
+    pa_assert_se(pa_tagstruct_getu32(d->tc, &command) >= 0);
+    pa_assert_se(pa_tagstruct_getu32(d->tc, &tag) >= 0);
+    pa_assert(command == d->command);
+    pa_assert(tag == d->tag);
+
     /* call the dispatcher again, hopefully this time, the access check will
      * fail or succeed immediately */
     command_table[d->command](d->pd, d->command, d->tag, d->tc, d->userdata);
