Description: droid: bring back SCO fake sink support
 For some reason, Canonical choose to update the droid module in the
 destructive way, using the new patch to clober 0207-Enable-pulseaudio
 -droid.patch. In doing so, somehow they miss the SCO-fake-sink addition
 required for HFP over oFono to work properly (and yet leaving some
 definition around for some reason).
 .
 This patch bring back the SCO fake sink using the patch from the Utopic
 that someone has generously commiting patch-applied code into git,
 enabling me to extract the relevant part from the code.
Author: Ratchanan Srirattanamet <ratchanan@ubports.com>
Origin: vendor, https://github.com/saemy/pulseaudio/commit/4bb6142da20b7f38c2a343a4f007a3c0c2787b97
Origin: vendor, https://github.com/saemy/pulseaudio/commit/60d26f12dc67af7f634aa4e5f361e7562ec050b1
Forwarded: no
Last-Update: 2020-02-11
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/src/modules/droid/droid-sink.c
+++ b/src/modules/droid/droid-sink.c
@@ -102,6 +102,9 @@
     pa_droid_card_data *card_data;
     pa_droid_hw_module *hw_module;
     pa_droid_stream *stream;
+
+    char *sco_fake_sink_name;
+    struct pa_sink *sco_fake_sink;
 };
 
 enum {
@@ -201,6 +204,19 @@
     return need_update;
 }
 
+static void set_fake_sco_sink_transport_property(struct userdata *u, const char *value) {
+    pa_proplist *pl;
+
+    pa_assert(u);
+    pa_assert(value);
+    pa_assert(u->sco_fake_sink);
+
+    pl = pa_proplist_new();
+    pa_proplist_sets(pl, HSP_PREVENT_SUSPEND_STR, value);
+    pa_sink_update_proplist(u->sco_fake_sink, PA_UPDATE_REPLACE, pl);
+    pa_proplist_free(pl);
+}
+
 /* Called from main context during voice calls, and from IO context during media operation. */
 static void do_routing(struct userdata *u) {
     audio_devices_t routing;
@@ -533,6 +549,7 @@
 static int sink_set_port_cb(pa_sink *s, pa_device_port *p) {
     struct userdata *u = s->userdata;
     pa_droid_port_data *data;
+    const char *sco_transport_enabled;
 
     pa_assert(u);
     pa_assert(p);
@@ -550,6 +567,21 @@
     pa_log_debug("Sink set port %u", data->device);
 
     set_primary_devices(u, data->device);
+
+    /* See if the sco fake sink element is available (only when needed) */
+    if ((u->sco_fake_sink == NULL) && (data->device & AUDIO_DEVICE_OUT_ALL_SCO))
+        u->sco_fake_sink = pa_sco_fake_sink_discover(u->core, u->sco_fake_sink_name);
+
+    /* Update the bluetooth hsp transport property before we do the routing */
+    if (u->sco_fake_sink) {
+        sco_transport_enabled = pa_proplist_gets(u->sco_fake_sink->proplist, HSP_PREVENT_SUSPEND_STR);
+        if (sco_transport_enabled && pa_streq(sco_transport_enabled, "true")) {
+            if (data->device & ~AUDIO_DEVICE_OUT_ALL_SCO)
+                set_fake_sco_sink_transport_property(u, "false");
+        } else if (data->device & AUDIO_DEVICE_OUT_ALL_SCO)
+            set_fake_sco_sink_transport_property(u, "true");
+    }
+
     /* If we are in voice call, sink is usually in suspended state and routing change can be applied immediately.
      * When in media use cases, do the routing change in IO thread if we are currently in RUNNING or IDLE state. */
     if (u->use_voice_volume || !PA_SINK_IS_OPENED(pa_sink_get_state(u->sink)))
@@ -986,6 +1018,25 @@
     return PA_HOOK_OK;
 }
 
+static struct pa_sink *pa_sco_fake_sink_discover(pa_core *core, const char *sink_name) {
+    struct pa_sink *sink;
+    pa_idxset *idxset;
+    void *state = NULL;
+
+    pa_assert(core);
+    pa_assert(sink_name);
+    pa_assert_se((idxset = core->sinks));
+
+    while ((sink = pa_idxset_iterate(idxset, &state, NULL)) != NULL) {
+        if (pa_streq(sink_name, sink->name)) {
+            pa_log_debug("Found fake SCO sink '%s'", sink_name);
+            return sink;
+        }
+    }
+
+    return NULL;
+}
+
 pa_sink *pa_droid_sink_new(pa_module *m,
                              pa_modargs *ma,
                              const char *driver,
@@ -1111,6 +1162,7 @@
     u->voice_virtual_stream = voice_virtual_stream;
     u->voice_property_key   = pa_xstrdup(pa_modargs_get_value(ma, "voice_property_key", DEFAULT_VOICE_CONTROL_PROPERTY_KEY));
     u->voice_property_value = pa_xstrdup(pa_modargs_get_value(ma, "voice_property_value", DEFAULT_VOICE_CONTROL_PROPERTY_VALUE));
+    u->sco_fake_sink_name = pa_xstrdup(pa_modargs_get_value(ma, "sco_fake_sink", DEFAULT_SCO_FAKE_SINK));
     u->extra_devices_map = pa_hashmap_new(pa_idxset_trivial_hash_func, pa_idxset_trivial_compare_func);
 
     if (card_data) {
@@ -1365,6 +1417,9 @@
     if (u->hw_module)
         pa_droid_hw_module_unref(u->hw_module);
 
+    if (u->sco_fake_sink_name)
+        pa_xfree(u->sco_fake_sink_name);
+
     if (u->voice_property_key)
         pa_xfree(u->voice_property_key);
     if (u->voice_property_value)
--- a/src/modules/droid/module-droid-sink.c
+++ b/src/modules/droid/module-droid-sink.c
@@ -49,7 +49,8 @@
 PA_MODULE_AUTHOR("Juho Hämäläinen");
 PA_MODULE_DESCRIPTION("Droid sink");
 PA_MODULE_USAGE("master_sink=<sink to connect to> "
-                "sink_name=<name of created sink>");
+                "sink_name=<name of created sink> "
+                "sco_fake_sink=<name of the fake sco sink used for hsp>");
 PA_MODULE_VERSION(PACKAGE_VERSION);
 
 static const char* const valid_modargs[] = {
@@ -70,6 +71,7 @@
     "deferred_volume",
     "voice_property_key",
     "voice_property_value",
+    "sco_fake_sink",
     NULL,
 };
 
